<?php

declare(strict_types=1);

namespace App\Drivers\Embedding;

use App\Contracts\EmbeddingDriverInterface;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;
use RuntimeException;

class CloudFlareDriver implements EmbeddingDriverInterface
{
    /**
     * CloudFlare API base URL
     */
    private const API_BASE_URL = 'https://api.cloudflare.com/client/v4';

    /**
     * The CloudFlare API token
     */
    private string $apiToken;

    /**
     * The CloudFlare account ID
     */
    private string $accountId;

    /**
     * The embedding model to use
     */
    private string $model;

    /**
     * The dimensions of the embeddings
     */
    private int $dimensions;

    /**
     * Create a new CloudFlare driver instance.
     *
     * @param  array  $config
     * @return void
     */
    public function __construct(array $config)
    {
        $this->apiToken = $config['api_token'];
        $this->accountId = $config['account_id'];
        $this->model = $config['model'] ?? '@cf/baai/bge-m3';
        $this->dimensions = (int) ($config['dimensions'] ?? 1024);
    }

    /**
     * Generate an embedding for the given text using CloudFlare Workers AI.
     *
     * @param  string  $text
     * @return array<float>
     *
     * @throws \RuntimeException
     */
    public function embed(string $text): array
    {
        try {
            $response = Http::connectTimeout(10)->timeout(45)->withHeaders([
                'Authorization' => "Bearer {$this->apiToken}",
                'Content-Type' => 'application/json',
            ])->post("{$this->getApiBaseUrl()}/accounts/{$this->accountId}/ai/run/{$this->model}", [
                'text' => $text,
            ]);

            if ($response->failed()) {
                Log::error('CloudFlare embedding API error', [
                    'status' => $response->status(),
                    'body' => $response->body(),
                ]);

                throw new RuntimeException(
                    "CloudFlare API request failed with status {$response->status()}: {$response->reason()}"
                );
            }

            $data = $response->json();

            if (!isset($data['result']['data'][0]) || !is_array($data['result']['data'][0])) {
                Log::error('Invalid response format from CloudFlare API', ['response' => $data]);
                throw new RuntimeException('Invalid response format from CloudFlare API');
            }

            return $data['result']['data'][0];
        } catch (\Exception $e) {
            Log::error('CloudFlare embedding generation failed', [
                'message' => $e->getMessage(),
                'trace' => $e->getTraceAsString(),
            ]);

            throw new RuntimeException("Failed to generate embedding: {$e->getMessage()}", 0, $e);
        }
    }

    /**
     * Get the name of the driver.
     *
     * @return string
     */
    public function getName(): string
    {
        return 'cloudflare';
    }

    /**
     * Check if the driver is healthy and available.
     *
     * @return bool
     */
    public function isHealthy(): bool
    {
        try {
            // A simple health check by making a request to the API
            $response = Http::withHeaders([
                'Authorization' => "Bearer {$this->apiToken}",
            ])->get("{$this->getApiBaseUrl()}/accounts/{$this->accountId}");

            return $response->successful();
        } catch (\Exception $e) {
            Log::error('CloudFlare health check failed', [
                'message' => $e->getMessage(),
            ]);

            return false;
        }
    }

    /**
     * Get the dimensions of the embeddings generated by this driver.
     *
     * @return int
     */
    public function getDimensions(): int
    {
        return $this->dimensions;
    }

    /**
     * Get the API base URL.
     *
     * @return string
     */
    protected function getApiBaseUrl(): string
    {
        return self::API_BASE_URL;
    }
}